import{r as e,o as t,a as p,b as s,e as o,F as c,c as r,d as n}from"./app.f0b58fb0.js";import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";const i={},u=r(`<h1 id="getting-started" tabindex="-1"><a class="header-anchor" href="#getting-started" aria-hidden="true">#</a> Getting started</h1><h2 id="prerequisites" tabindex="-1"><a class="header-anchor" href="#prerequisites" aria-hidden="true">#</a> Prerequisites</h2><ul><li>PHP 8.0+</li><li>Composer</li></ul><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h2><h3 id="new-project" tabindex="-1"><a class="header-anchor" href="#new-project" aria-hidden="true">#</a> New project</h3><p>If you want to start a project from scratch, here is what you need.</p><h4 id="create-the-project-folder" tabindex="-1"><a class="header-anchor" href="#create-the-project-folder" aria-hidden="true">#</a> Create the project folder</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">mkdir</span> invoke-app

<span class="token builtin class-name">cd</span> invoke-app
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="init-composer" tabindex="-1"><a class="header-anchor" href="#init-composer" aria-hidden="true">#</a> Init Composer</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">composer</span> init
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="add-invoke-as-dependency" tabindex="-1"><a class="header-anchor" href="#add-invoke-as-dependency" aria-hidden="true">#</a> Add Invoke as dependency</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">composer</span> require storinka/invoke:^v2
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="create-index-php-file-with-your-code" tabindex="-1"><a class="header-anchor" href="#create-index-php-file-with-your-code" aria-hidden="true">#</a> Create <code>index.php</code> file with your code</h4><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">require_once</span> <span class="token string double-quoted-string">&quot;vendor/autoload.php&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Invoke<span class="token punctuation">\\</span>Method</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Invoke<span class="token punctuation">\\</span>Invoke</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function-definition function">bye</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string double-quoted-string">&quot;Bye, <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$name</span><span class="token punctuation">}</span></span>..&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Hello</span> <span class="token keyword">extends</span> <span class="token class-name">Method</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$name</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string double-quoted-string">&quot;Hello, <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">}</span></span>!&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name static-context">Invoke</span><span class="token operator">::</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string double-quoted-string">&quot;bye&quot;</span><span class="token punctuation">,</span>
    <span class="token string double-quoted-string">&quot;hello&quot;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">Hello</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Invoke</span><span class="token operator">::</span><span class="token function">serve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>Then run the project by <code>php -S &#39;localhost:5000&#39; index.php</code> and try to invoke:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token string">&#39;localhost:5000/invoke/bye?name=REST&#39;</span>

<span class="token function">curl</span> <span class="token string">&#39;localhost:5000/invoke/hello?name=Invoke&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="laravel-integration" tabindex="-1"><a class="header-anchor" href="#laravel-integration" aria-hidden="true">#</a> Laravel integration</h3>`,17),d=n("Get Laravel integration package "),k={href:"https://github.com/storinka/invoke-laravel",target:"_blank",rel:"noopener noreferrer"},b=n("here"),h=n(".");function m(g,v){const a=e("ExternalLinkIcon");return t(),p(c,null,[u,s("p",null,[d,s("a",k,[b,o(a)]),h])],64)}var x=l(i,[["render",m]]);export{x as default};
